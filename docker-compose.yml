version: "3"
services:
  choreographer:
    restart: on-failure
    build:
      context: .
      dockerfile: ./apps/choreographer/Dockerfile
      target: build
    command: npm run start:dev choreographer
    ports:
      - '${CHOREOGRAPHER_PORT}:${CHOREOGRAPHER_PORT}'
    env_file:
      - ./apps/choreographer/.env
      - ./.env
    depends_on:
      - auth
      - tasks
      - users
      - rabbitmq
    volumes:
      - .:/usr/src/app
    networks:
      - backend
  auth:
    restart: on-failure
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: build
    command: npm run start:dev auth
    ports:
      - '${AUTH_PORT}:${AUTH_PORT}'
    env_file:
      - ./apps/auth/.env
      - ./.env
    depends_on:
      - users_database
      - rabbitmq
    volumes:
      - .:/usr/src/app
    networks:
      - backend
  tasks:
    restart: on-failure
    build:
      context: .
      dockerfile: ./apps/tasks/Dockerfile
      target: build
    command: npm run start:dev tasks
    ports:
      - '${TASKS_PORT}:${TASKS_PORT}'
    env_file:
      - ./apps/tasks/.env
      - ./.env
    depends_on:
      - users_database
      - rabbitmq
    volumes:
      - .:/usr/src/app
    networks:
      - backend
  users:
    build:
      context: .
      dockerfile: ./apps/users/Dockerfile
      target: build
    command: npm run start:dev users
    ports:
      - '${USERS_PORT}:${USERS_PORT}'
    env_file:
      - ./apps/users/.env
      - ./.env
    depends_on:
      - users_database
      - rabbitmq
    volumes:
      - .:/usr/src/app
    networks:
      - backend
  users_database: ###Each micro should get its own DB to respect principal of isolation
    image: mysql:8.0.33
    restart: on-failure
    ports:
      - '${USERS_DB_PORT}:${USERS_DB_PORT}'
    environment:
      ###### These values would all be fed through the ci or something like docker secrets
      - MYSQL_USER=${USERS_MYSQL_USER}
      - MYSQL_PASSWORD=${USERS_MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${USERS_MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${USERS_DATABASE_NAME}
    volumes:
        - users_data:/var/lib/mysql_users_db
    networks:
      - backend
  tasks_database:
      image: mysql:8.0.33
      restart: on-failure
      ports:
        - '${TASKS_DB_PORT}:${TASKS_DB_PORT}'
      environment:
        ###### These values would all be fed through the ci or something like docker secrets
        - MYSQL_USER=${TASKS_MYSQL_USER}
        - MYSQL_PASSWORD=${TASKS_MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${TASKS_MYSQL_ROOT_PASSWORD}
        - MYSQl_DB=${TASKS_DATABASE_NAME}
        - MYSQL_DATABASE=${TASKS_DATABASE_NAME}
      volumes:
        - tasks_data:/var/lib/mysql_tasks_db
      networks:
        - backend
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    environment: ##This should be pulled from ci and public access should be limited by IP but leaving for now
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    # healthcheck: ##todo: health checks for services
    #   test: [ "CMD", "nc", "-z", "localhost", "5672" ]
    #   interval: 5s
    #   timeout: 15s
    #   retries: 1
    ports:
      - "5672:5672" ##todo:env var
      - "15672:15672"
    networks:
      - backend
networks:
  backend:
    driver: bridge
volumes:
  users_data:
    driver: local
  tasks_data:
    driver: local
  rabbit_data:
    driver: local